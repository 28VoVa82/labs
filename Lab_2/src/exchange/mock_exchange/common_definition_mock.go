// Code generated by MockGen. DO NOT EDIT.
// Source: src\exchange\common_definition.go

// Package mock_exchange is a generated GoMock package.
package mock_exchange

import (
	cfg "Lab_2/src/cfg"
	exchange "Lab_2/src/exchange"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNetworkCommunication is a mock of NetworkCommunication interface.
type MockNetworkCommunication struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkCommunicationMockRecorder
}

// MockNetworkCommunicationMockRecorder is the mock recorder for MockNetworkCommunication.
type MockNetworkCommunicationMockRecorder struct {
	mock *MockNetworkCommunication
}

// NewMockNetworkCommunication creates a new mock instance.
func NewMockNetworkCommunication(ctrl *gomock.Controller) *MockNetworkCommunication {
	mock := &MockNetworkCommunication{ctrl: ctrl}
	mock.recorder = &MockNetworkCommunicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkCommunication) EXPECT() *MockNetworkCommunicationMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockNetworkCommunication) CloseConnection(conn net.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnection", conn)
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockNetworkCommunicationMockRecorder) CloseConnection(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockNetworkCommunication)(nil).CloseConnection), conn)
}

// DialServer mocks base method.
func (m *MockNetworkCommunication) DialServer(cfg *cfg.ClientConfig) net.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialServer", cfg)
	ret0, _ := ret[0].(net.Conn)
	return ret0
}

// DialServer indicates an expected call of DialServer.
func (mr *MockNetworkCommunicationMockRecorder) DialServer(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialServer", reflect.TypeOf((*MockNetworkCommunication)(nil).DialServer), cfg)
}

// ReceiveData mocks base method.
func (m *MockNetworkCommunication) ReceiveData(conn net.Conn) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveData", conn)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ReceiveData indicates an expected call of ReceiveData.
func (mr *MockNetworkCommunicationMockRecorder) ReceiveData(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveData", reflect.TypeOf((*MockNetworkCommunication)(nil).ReceiveData), conn)
}

// SendData mocks base method.
func (m *MockNetworkCommunication) SendData(data []byte, conn net.Conn) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendData", data, conn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SendData indicates an expected call of SendData.
func (mr *MockNetworkCommunicationMockRecorder) SendData(data, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendData", reflect.TypeOf((*MockNetworkCommunication)(nil).SendData), data, conn)
}

// MocknetData is a mock of netData interface.
type MocknetData struct {
	ctrl     *gomock.Controller
	recorder *MocknetDataMockRecorder
}

// MocknetDataMockRecorder is the mock recorder for MocknetData.
type MocknetDataMockRecorder struct {
	mock *MocknetData
}

// NewMocknetData creates a new mock instance.
func NewMocknetData(ctrl *gomock.Controller) *MocknetData {
	mock := &MocknetData{ctrl: ctrl}
	mock.recorder = &MocknetDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknetData) EXPECT() *MocknetDataMockRecorder {
	return m.recorder
}

// ParseRequest mocks base method.
func (m *MocknetData) ParseRequest(data []byte) (exchange.ClientRequest, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRequest", data)
	ret0, _ := ret[0].(exchange.ClientRequest)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ParseRequest indicates an expected call of ParseRequest.
func (mr *MocknetDataMockRecorder) ParseRequest(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRequest", reflect.TypeOf((*MocknetData)(nil).ParseRequest), data)
}

// ParseRespond mocks base method.
func (m *MocknetData) ParseRespond(data []byte) (exchange.ServerRespond, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRespond", data)
	ret0, _ := ret[0].(exchange.ServerRespond)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ParseRespond indicates an expected call of ParseRespond.
func (mr *MocknetDataMockRecorder) ParseRespond(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRespond", reflect.TypeOf((*MocknetData)(nil).ParseRespond), data)
}

// SerializeRequest mocks base method.
func (m *MocknetData) SerializeRequest(request exchange.ClientRequest) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerializeRequest", request)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// SerializeRequest indicates an expected call of SerializeRequest.
func (mr *MocknetDataMockRecorder) SerializeRequest(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializeRequest", reflect.TypeOf((*MocknetData)(nil).SerializeRequest), request)
}

// SerializeRespond mocks base method.
func (m *MocknetData) SerializeRespond(respond exchange.ServerRespond) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerializeRespond", respond)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// SerializeRespond indicates an expected call of SerializeRespond.
func (mr *MocknetDataMockRecorder) SerializeRespond(respond interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializeRespond", reflect.TypeOf((*MocknetData)(nil).SerializeRespond), respond)
}
